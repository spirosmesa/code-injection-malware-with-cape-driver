using System.Text.Json.Serialization;
using System.Text.Json;

using Analyzer.Drivers.Cape.Reporting.CapeJsonClasses;


namespace Analyzer.Drivers.Cape.Reporting;

public class ApiCall
{

    public ApiCall(CapeApiCall capeApiCall)
    {
        Category = capeApiCall.Category;
        Name = capeApiCall.Name;

        if (capeApiCall.Status)
            Status = 1;
        else Status = 0;

        ReturnValue = capeApiCall.ReturnValue;
        Time = capeApiCall.Time;
        ThreadId = int.Parse(capeApiCall.ThreadId);


        foreach (var dict in capeApiCall.Args)
        {
            //Args is a list of dictionaries
            this.Arguments.Add(dict["name"].ToString(), dict["value"]);
        }


    }

    public string? Category
    {
        get;
        set;
    }

    [JsonPropertyName("api")]
    public string Name
    {
        get;
        set;
    } = string.Empty;

    public uint Status
    {
        get;
        set;
    }

    public JsonElement ReturnValue
    {
        get;
        set;
    }

    /**
    public double Time
    {
        get;
        set;
    }*/
    public string Time { get; set; }

    [JsonPropertyName("tid")]
    public int ThreadId
    {
        get;
        set;
    }

    public Dictionary<string, JsonElement> Arguments
    {
        get;
        set;
    } = new();

    /// <inheritdoc />
    public override string ToString() => Name;
}
