using System.IO;
using Analyzer.Drivers.Cape.Api;
using Analyzer.Drivers.Cape.Reporting;
using Analyzer.Data;
using Serilog;

namespace Analyzer.Drivers.Cape;

public class CapeExecutionDriver : IExecutionDriver
{

    private readonly CapeApiClient _client;

    public CapeExecutionDriver()
    {
        string? host = Environment.GetEnvironmentVariable("CAPE_HOST");
        if (string.IsNullOrEmpty(host))
            //throw new ArgumentException("CUCKOO_HOST environment variable not set.");
            ;

        string? token = Environment.GetEnvironmentVariable("CAPE_TOKEN");
        if (string.IsNullOrEmpty(token))
            //throw new ArgumentException("CUCKOO_TOKEN environment variable not set.");
            ;

        Log.Debug("Using CAPE host {Host}.", host);

        //_client = new CapeApiClient(new Uri(host), token);
    }

    public CapeExecutionDriver(Uri baseUri, string apiToken)
    {
        _client = new CapeApiClient(baseUri, apiToken);
    }

    public string? Machine
    {
        get;
        set;
    }

    public int Timeout
    {
        get;
        set;
    } = 10;

    public void Dispose()
    {
        //_client.Dispose();
        ;
    }

    public Task<ExecutionResult> ExecuteFileAsync(ILogger logger, string path, ExecutionParameters parameters)
    {
        using (StreamWriter fd = new StreamWriter("/home/sam/Desktop/logOutput2.log")) {
            fd.WriteLine("ExecuteFileAsync called");
        }
        //return Task.FromResult(new ExecutionResult());
        return null;
    }

    public IEnumerable<string> LocateLogPaths(string path)
    {
        
        //First check if the we point to a processed report.
        if (path.Contains(".json")) {
            yield return path;
        }

        string[] fragments = { path, "reports", "report.json" };
        string standardReportPath = Path.Combine(fragments);

        if (File.Exists(standardReportPath))
        {
            yield return standardReportPath;
        } 
    }

    //Implement this one.
    public Task<ExecutionResult> ReadTraceAsync(ILogger logger, string path)
    {
        logger.Debug("ReadTraceAsync called with path: {@path}", path);
        return Task.FromResult(CapeExecutionTraceReader.FromFiles(path));
    }
}