using Analyzer.Data;
using Analyzer.Drivers.Cape.Reporting;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Analyzer.Drivers.Cape;

public class CapeExecutionTraceReader
{
    private static readonly DateTime LinuxEpoch = new(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);

    private static decimal parseTimestamp(string timestamp)
    {

        // We have to do this instead of using DateTime.ParseExact()
        // because an exception is randomly thrown otherwise.
        string[] members = timestamp.Split(' ');
        string[] dateParts = members[0].Split("-");

        var year = int.Parse(dateParts[0]);
        var month = int.Parse(dateParts[1]);
        var day = int.Parse(dateParts[2]); 

        string[] timeParts = members[1].Split(":");

        var hour = int.Parse(timeParts[0]);
        var minutes = int.Parse(timeParts[1]);
        var seconds = int.Parse(timeParts[2].Split(',')[0]);
        var milliseconds = int.Parse(timeParts[2].Split(',')[1]);

        var dt = new DateTime(year, month, day, hour, minutes, seconds, milliseconds);

        // Operations to get Unix time in seconds with millis after a comma.
        // Tests have shown that the differing digits of the millisecond string
        // are the ones that hold the milliseconds.
        var unixMilliseconds = ((DateTimeOffset)dt).ToUnixTimeMilliseconds().ToString();
        return decimal.Parse(unixMilliseconds);
    }

    private static object InterpretReturnValueString(string rawString)
    {
        using (StreamWriter fd = new StreamWriter("/home/sam/Desktop/erroLog3.txt")) {
            fd.WriteLine(rawString);
        }
        
        try {
            var res = ulong.Parse(rawString[2..], NumberStyles.HexNumber);
            return res;
        }
        catch (Exception ex) {
            var res = rawString;
            return res;
        }
    }

    public static ExecutionResult FromFiles(string reportFile)
    {
        
        var callEvents = new List<ExecutionEvent>();
        var capeReport = CapeReport.FromFile(reportFile);   


        //For each event in CapeReport, timestamp, pid, tid, method.
        // copy from DrakvufExecutionTraceReader.FromReports
        var behavior = capeReport.Behavior;

        if (behavior is not null) {
            decimal lastTimeStamp = 0;
            ExecutionEvent newEvent;

            // For each process within the report
            foreach (var process in capeReport.Behavior.Processes)
            {

                // For each api call within the process
                foreach (var apiCall in process.Calls)
                {
                    var pid = Convert.ToUInt32(apiCall.ParentCaller, 16);
                    var tid = Convert.ToUInt32(apiCall.ThreadId, 16);

                    //Parse time stamp
                    newEvent = new ExecutionEvent(parseTimestamp(apiCall.Time), pid, tid, apiCall.API);
                    foreach (var arg in apiCall.Arguments)
                    {
                        newEvent.Arguments.Add(InterpretReturnValueString(arg.Value.ToString()));
                    }
                    callEvents.Add(newEvent);
                }
            }
        }
        var eventStream = new ExecutionEventStream(callEvents);
        return new ExecutionResult("<unknown>", eventStream);
    }
}
