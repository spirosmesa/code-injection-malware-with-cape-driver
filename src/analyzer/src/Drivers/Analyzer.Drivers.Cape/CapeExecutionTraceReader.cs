using Analyzer.Data;
using Analyzer.Drivers.Cape.Reporting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Analyzer.Drivers.Cape;

public class CapeExecutionTraceReader
{
    private static readonly DateTime LinuxEpoch = new(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);

    private static decimal parseTimestamp(string timestamp)
    {

        // We have to do this instead of using DateTime.ParseExact()
        // because an exception is randomly thrown otherwise.
        string[] members = timestamp.Split(' ');
        string[] dateParts = members[0].Split("-");

        var year = int.Parse(dateParts[0]);
        var month = int.Parse(dateParts[1]);
        var day = int.Parse(dateParts[2]); 

        string[] timeParts = members[1].Split(":");

        var hour = int.Parse(timeParts[0]);
        var minutes = int.Parse(timeParts[1]);
        var seconds = int.Parse(timeParts[2].Split(',')[0]);
        var milliseconds = int.Parse(timeParts[2].Split(',')[1]);

        var dt = new DateTime(year, month, day, hour, minutes, seconds, milliseconds);

        // Operations to get Unix time in seconds with millis after a comma.
        // Tests have shown that the differing digits of the millisecond string
        // are the ones that hold the milliseconds.
        var unixMilliseconds = ((DateTimeOffset)dt).ToUnixTimeMilliseconds().ToString();
        return decimal.Parse(unixMilliseconds);
    }

    public static ExecutionResult FromFiles(string reportFile)
    {
        
        var callEvents = new List<ExecutionEvent>();
        var capeReport = CapeReport.FromFile(reportFile);   


        //For each event in CapeReport, timestamp, pid, tid, method.
        // copy from DrakvufExecutionTraceReader.FromReports
        var behavior = capeReport.Behavior;

        if (behavior is not null) {
            decimal lastTimeStamp = 0;
            ExecutionEvent newEvent;

            // For each process within the report
            foreach (var process in capeReport.Behavior.Processes)
            {

                // For each api call within the process
                foreach (var apiCall in process.Calls)
                {
                    //Parse time stamp
                    newEvent = new  ExecutionEvent(parseTimestamp(apiCall.Time), apiCall.PID, apiCall.TID, apiCall.Method)
                    ;
                }
                /**
                 
                 new ExecutionEvent(unixTimeStampToDateTime, e.PID, e.TID, e.Method)
                 "calls": [
          {
            "timestamp": "2023-10-16 02:29:28,773",
            "thread_id": "4792",
            "caller": "0x7672db61",
            "parentcaller": "0x7366271a",
            "category": "system",
            "api": "LdrGetDllHandle",
            "status": true,
            "return": "0x00000000",
            "arguments": [
              {
                "name": "FileName",
                "value": "kernel32.dll"
              },
              {
                "name": "ModuleHandle",
                "value": "0x761f0000"
              }
            ],
                newEvent.Arguments.Add(e.Key);
                newEvent.Arguments.Add(e.ValueName);
                newEvent.Arguments.Add(e.Value);


                 */
                ;
            }
        }
        



        return null;
    }


}
