using System.Text.Json;
using Analyzer.Drivers.Cape.Reporting.CapeJsonClasses;

namespace Analyzer.Drivers.Cape.Reporting;
public class CapeReport
{

    private static CapeReport fromCapeJsonReport(CapeJsonReport capeJsonReport)
    {
        CapeReport report = new CapeReport();
 
        if (capeJsonReport.Behavior != null) {
            //Contains `Processes` which is a list of 
            report.Behavior = new SystemBehaviorReport();

            foreach (var capeProcess in capeJsonReport.Behavior.Processes)
            {
                var processBehaviorReport = new ProcessBehaviorReport();
                processBehaviorReport.ProcessPath = capeProcess.ProcessPath;
                foreach (var capeApiCall in capeProcess.Calls)
                {
                    processBehaviorReport.Calls.Add(new ApiCall(capeApiCall));
                }

                report.Behavior.Processes.Add(processBehaviorReport);
             }
        }
        return report;
    }

    public SystemBehaviorReport? Behavior
    {
        get;
        set;
    }

    public static CapeReport FromFile(string filePath) => FromJson(File.ReadAllText(filePath));

    // Add another class which deserializes from the JSON and returns the CapeReport.
    public static CapeReport FromJson(string json)
    {
        CapeJsonReport capeJsonReport = JsonSerializer.Deserialize<CapeJsonReport>(json, JsonDefaults.SerializerOptions)!;
        return fromCapeJsonReport(capeJsonReport);
    }
}
