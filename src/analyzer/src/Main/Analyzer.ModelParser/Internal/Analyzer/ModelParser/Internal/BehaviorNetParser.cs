//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analyzer.ModelParser.Internal {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BehaviorNetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BEHAVIOR=1, ACCEPTING=2, PLACE=3, TRANSITION=4, WHERE=5, IN=6, PROCESS=7, 
		THREAD=8, OPEN_BRACE=9, CLOSE_BRACE=10, OPEN_BRACKET=11, CLOSE_BRACKET=12, 
		OPEN_PARENS=13, CLOSE_PARENS=14, EDGE=15, COMMA=16, DISCARD=17, OP_ADD=18, 
		OP_MUL=19, OP_REL=20, OP_AND=21, OP_OR=22, OP_BIT=23, OP_NOT=24, RANGE_DOTS=25, 
		BOOL=26, NUM=27, ID=28, STR=29, WS=30;
	public const int
		RULE_behavior = 0, RULE_element = 1, RULE_place = 2, RULE_transition = 3, 
		RULE_condition = 4, RULE_argument = 5, RULE_returnClause = 6, RULE_inClause = 7, 
		RULE_processClause = 8, RULE_threadClause = 9, RULE_whereClause = 10, 
		RULE_expression = 11, RULE_edgeChain = 12, RULE_idList = 13, RULE_qualifiedName = 14;
	public static readonly string[] ruleNames = {
		"behavior", "element", "place", "transition", "condition", "argument", 
		"returnClause", "inClause", "processClause", "threadClause", "whereClause", 
		"expression", "edgeChain", "idList", "qualifiedName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'behavior'", "'accepting'", "'place'", "'transition'", "'where'", 
		"'in'", "'process'", "'thread'", "'{'", "'}'", "'['", "']'", "'('", "')'", 
		"'->'", "','", "'_'", null, null, null, "'and'", "'or'", null, null, "'..'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BEHAVIOR", "ACCEPTING", "PLACE", "TRANSITION", "WHERE", "IN", "PROCESS", 
		"THREAD", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PARENS", "CLOSE_PARENS", "EDGE", "COMMA", "DISCARD", "OP_ADD", "OP_MUL", 
		"OP_REL", "OP_AND", "OP_OR", "OP_BIT", "OP_NOT", "RANGE_DOTS", "BOOL", 
		"NUM", "ID", "STR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BehaviorGraph.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BehaviorNetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BehaviorNetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BehaviorNetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BehaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEHAVIOR() { return GetToken(BehaviorNetParser.BEHAVIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(BehaviorNetParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(BehaviorNetParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public BehaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BehaviorContext behavior() {
		BehaviorContext _localctx = new BehaviorContext(Context, State);
		EnterRule(_localctx, 0, RULE_behavior);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(BEHAVIOR);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==STR) {
				{
				State = 31;
				qualifiedName();
				}
			}

			State = 34;
			Match(OPEN_BRACE);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 268435480L) != 0)) {
				{
				{
				State = 35;
				element();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition() {
			return GetRuleContext<TransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeChainContext edgeChain() {
			return GetRuleContext<EdgeChainContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_element);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				place();
				}
				break;
			case TRANSITION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				transition();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45;
				edgeChain();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACE() { return GetToken(BehaviorNetParser.PLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCEPTING() { return GetToken(BehaviorNetParser.ACCEPTING, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_place);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(PLACE);
			State = 49;
			idList();
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ACCEPTING) {
				{
				State = 50;
				Match(ACCEPTING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSITION() { return GetToken(BehaviorNetParser.TRANSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(BehaviorNetParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(BehaviorNetParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_transition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(TRANSITION);
			State = 54;
			Match(ID);
			State = 55;
			Match(OPEN_BRACE);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 56;
				condition();
				}
			}

			State = 59;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(BehaviorNetParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(BehaviorNetParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnClauseContext returnClause() {
			return GetRuleContext<ReturnClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InClauseContext inClause() {
			return GetRuleContext<InClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BehaviorNetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BehaviorNetParser.COMMA, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(ID);
			State = 62;
			Match(OPEN_PARENS);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISCARD || _la==ID) {
				{
				State = 63;
				argument();
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 64;
					Match(COMMA);
					State = 65;
					argument();
					}
					}
					State = 70;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 73;
			Match(CLOSE_PARENS);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EDGE) {
				{
				State = 74;
				returnClause();
				}
			}

			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 77;
				inClause();
				}
			}

			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 80;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DiscardArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(BehaviorNetParser.DISCARD, 0); }
		public DiscardArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterDiscardArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitDiscardArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardArgument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdArgumentContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		public IdArgumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterIdArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitIdArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 10, RULE_argument);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(ID);
				}
				break;
			case DISCARD:
				_localctx = new DiscardArgumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(DISCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGE() { return GetToken(BehaviorNetParser.EDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ReturnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterReturnClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitReturnClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnClauseContext returnClause() {
		ReturnClauseContext _localctx = new ReturnClauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(EDGE);
			State = 88;
			argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BehaviorNetParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcessClauseContext processClause() {
			return GetRuleContext<ProcessClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadClauseContext threadClause() {
			return GetRuleContext<ThreadClauseContext>(0);
		}
		public InClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterInClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitInClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InClauseContext inClause() {
		InClauseContext _localctx = new InClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_inClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(IN);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROCESS) {
				{
				State = 91;
				processClause();
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD) {
				{
				State = 94;
				threadClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcessClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(BehaviorNetParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		public ProcessClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_processClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterProcessClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitProcessClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcessClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcessClauseContext processClause() {
		ProcessClauseContext _localctx = new ProcessClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_processClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(PROCESS);
			State = 98;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD() { return GetToken(BehaviorNetParser.THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		public ThreadClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterThreadClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitThreadClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadClauseContext threadClause() {
		ThreadClauseContext _localctx = new ThreadClauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_threadClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(THREAD);
			State = 101;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BehaviorNetParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_whereClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(WHERE);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 104;
				expression(0);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1023420416L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BehaviorNetParser.BOOL, 0); }
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(BehaviorNetParser.OP_ADD, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(BehaviorNetParser.NUM, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REL() { return GetToken(BehaviorNetParser.OP_REL, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(BehaviorNetParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(BehaviorNetParser.CLOSE_PARENS, 0); }
		public ParensExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterParensExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitParensExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(BehaviorNetParser.OP_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(BehaviorNetParser.OP_MUL, 0); }
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(BehaviorNetParser.OP_OR, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BehaviorNetParser.IN, 0); }
		public InExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(BehaviorNetParser.OP_AND, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BehaviorNetParser.STR, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(BehaviorNetParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_DOTS() { return GetToken(BehaviorNetParser.RANGE_DOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(BehaviorNetParser.CLOSE_BRACKET, 0); }
		public RangeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitRangeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIT() { return GetToken(BehaviorNetParser.OP_BIT, 0); }
		public BitwiseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterBitwiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitBitwiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				{
				_localctx = new ParensExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 110;
				Match(OPEN_PARENS);
				State = 111;
				expression(0);
				State = 112;
				Match(CLOSE_PARENS);
				}
				break;
			case OP_NOT:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114;
				Match(OP_NOT);
				State = 115;
				expression(13);
				}
				break;
			case OPEN_BRACKET:
				{
				_localctx = new RangeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116;
				Match(OPEN_BRACKET);
				State = 117;
				expression(0);
				State = 118;
				Match(RANGE_DOTS);
				State = 119;
				expression(0);
				State = 120;
				Match(CLOSE_BRACKET);
				}
				break;
			case NUM:
				{
				_localctx = new NumberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122;
				Match(NUM);
				}
				break;
			case STR:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123;
				Match(STR);
				}
				break;
			case BOOL:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				Match(BOOL);
				}
				break;
			case ID:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 149;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 128;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 129;
						Match(OP_MUL);
						State = 130;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 131;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 132;
						Match(OP_ADD);
						State = 133;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new BitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 134;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 135;
						Match(OP_BIT);
						State = 136;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 137;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 138;
						Match(OP_REL);
						State = 139;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new InExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 141;
						Match(IN);
						State = 142;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 144;
						Match(OP_AND);
						State = 145;
						expression(8);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 147;
						Match(OP_OR);
						State = 148;
						expression(7);
						}
						break;
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EdgeChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(BehaviorNetParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(BehaviorNetParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EDGE() { return GetTokens(BehaviorNetParser.EDGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EDGE(int i) {
			return GetToken(BehaviorNetParser.EDGE, i);
		}
		public EdgeChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterEdgeChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitEdgeChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeChainContext edgeChain() {
		EdgeChainContext _localctx = new EdgeChainContext(Context, State);
		EnterRule(_localctx, 24, RULE_edgeChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(ID);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 155;
				Match(EDGE);
				State = 156;
				Match(ID);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EDGE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(BehaviorNetParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(BehaviorNetParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(BehaviorNetParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(BehaviorNetParser.ID, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 26, RULE_idList);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(OPEN_BRACKET);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 162;
					Match(ID);
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ID );
				State = 167;
				Match(CLOSE_BRACKET);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BehaviorNetParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BehaviorNetParser.STR, 0); }
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBehaviorNetListener typedListener = listener as IBehaviorNetListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBehaviorNetVisitor<TResult> typedVisitor = visitor as IBehaviorNetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==STR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,30,174,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,3,0,33,8,0,1,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,1,0,1,0,1,1,1,1,
		1,1,3,1,47,8,1,1,2,1,2,1,2,3,2,52,8,2,1,3,1,3,1,3,1,3,3,3,58,8,3,1,3,1,
		3,1,4,1,4,1,4,1,4,1,4,5,4,67,8,4,10,4,12,4,70,9,4,3,4,72,8,4,1,4,1,4,3,
		4,76,8,4,1,4,3,4,79,8,4,1,4,3,4,82,8,4,1,5,1,5,3,5,86,8,5,1,6,1,6,1,6,
		1,7,1,7,3,7,93,8,7,1,7,3,7,96,8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,4,
		10,106,8,10,11,10,12,10,107,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,127,8,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,5,11,150,8,11,10,11,12,11,153,9,11,1,12,1,12,1,12,
		4,12,158,8,12,11,12,12,12,159,1,13,1,13,4,13,164,8,13,11,13,12,13,165,
		1,13,1,13,3,13,170,8,13,1,14,1,14,1,14,0,1,22,15,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,0,1,1,0,28,29,189,0,30,1,0,0,0,2,46,1,0,0,0,4,48,1,0,
		0,0,6,53,1,0,0,0,8,61,1,0,0,0,10,85,1,0,0,0,12,87,1,0,0,0,14,90,1,0,0,
		0,16,97,1,0,0,0,18,100,1,0,0,0,20,103,1,0,0,0,22,126,1,0,0,0,24,154,1,
		0,0,0,26,169,1,0,0,0,28,171,1,0,0,0,30,32,5,1,0,0,31,33,3,28,14,0,32,31,
		1,0,0,0,32,33,1,0,0,0,33,34,1,0,0,0,34,38,5,9,0,0,35,37,3,2,1,0,36,35,
		1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,
		1,0,0,0,41,42,5,10,0,0,42,1,1,0,0,0,43,47,3,4,2,0,44,47,3,6,3,0,45,47,
		3,24,12,0,46,43,1,0,0,0,46,44,1,0,0,0,46,45,1,0,0,0,47,3,1,0,0,0,48,49,
		5,3,0,0,49,51,3,26,13,0,50,52,5,2,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,5,
		1,0,0,0,53,54,5,4,0,0,54,55,5,28,0,0,55,57,5,9,0,0,56,58,3,8,4,0,57,56,
		1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,60,5,10,0,0,60,7,1,0,0,0,61,62,
		5,28,0,0,62,71,5,13,0,0,63,68,3,10,5,0,64,65,5,16,0,0,65,67,3,10,5,0,66,
		64,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,72,1,0,0,0,70,
		68,1,0,0,0,71,63,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,75,5,14,0,0,74,
		76,3,12,6,0,75,74,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,79,3,14,7,0,78,
		77,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,82,3,20,10,0,81,80,1,0,0,0,81,
		82,1,0,0,0,82,9,1,0,0,0,83,86,5,28,0,0,84,86,5,17,0,0,85,83,1,0,0,0,85,
		84,1,0,0,0,86,11,1,0,0,0,87,88,5,15,0,0,88,89,3,10,5,0,89,13,1,0,0,0,90,
		92,5,6,0,0,91,93,3,16,8,0,92,91,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,
		96,3,18,9,0,95,94,1,0,0,0,95,96,1,0,0,0,96,15,1,0,0,0,97,98,5,7,0,0,98,
		99,5,28,0,0,99,17,1,0,0,0,100,101,5,8,0,0,101,102,5,28,0,0,102,19,1,0,
		0,0,103,105,5,5,0,0,104,106,3,22,11,0,105,104,1,0,0,0,106,107,1,0,0,0,
		107,105,1,0,0,0,107,108,1,0,0,0,108,21,1,0,0,0,109,110,6,11,-1,0,110,111,
		5,13,0,0,111,112,3,22,11,0,112,113,5,14,0,0,113,127,1,0,0,0,114,115,5,
		24,0,0,115,127,3,22,11,13,116,117,5,11,0,0,117,118,3,22,11,0,118,119,5,
		25,0,0,119,120,3,22,11,0,120,121,5,12,0,0,121,127,1,0,0,0,122,127,5,27,
		0,0,123,127,5,29,0,0,124,127,5,26,0,0,125,127,5,28,0,0,126,109,1,0,0,0,
		126,114,1,0,0,0,126,116,1,0,0,0,126,122,1,0,0,0,126,123,1,0,0,0,126,124,
		1,0,0,0,126,125,1,0,0,0,127,151,1,0,0,0,128,129,10,12,0,0,129,130,5,19,
		0,0,130,150,3,22,11,13,131,132,10,11,0,0,132,133,5,18,0,0,133,150,3,22,
		11,12,134,135,10,10,0,0,135,136,5,23,0,0,136,150,3,22,11,11,137,138,10,
		9,0,0,138,139,5,20,0,0,139,150,3,22,11,10,140,141,10,8,0,0,141,142,5,6,
		0,0,142,150,3,22,11,9,143,144,10,7,0,0,144,145,5,21,0,0,145,150,3,22,11,
		8,146,147,10,6,0,0,147,148,5,22,0,0,148,150,3,22,11,7,149,128,1,0,0,0,
		149,131,1,0,0,0,149,134,1,0,0,0,149,137,1,0,0,0,149,140,1,0,0,0,149,143,
		1,0,0,0,149,146,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,
		0,152,23,1,0,0,0,153,151,1,0,0,0,154,157,5,28,0,0,155,156,5,15,0,0,156,
		158,5,28,0,0,157,155,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,
		0,0,0,160,25,1,0,0,0,161,163,5,11,0,0,162,164,5,28,0,0,163,162,1,0,0,0,
		164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,170,
		5,12,0,0,168,170,5,28,0,0,169,161,1,0,0,0,169,168,1,0,0,0,170,27,1,0,0,
		0,171,172,7,0,0,0,172,29,1,0,0,0,20,32,38,46,51,57,68,71,75,78,81,85,92,
		95,107,126,149,151,159,165,169
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Analyzer.ModelParser.Internal
