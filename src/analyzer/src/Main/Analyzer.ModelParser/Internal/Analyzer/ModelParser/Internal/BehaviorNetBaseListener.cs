//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Analyzer.ModelParser.Internal {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IBehaviorNetListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class BehaviorNetBaseListener : IBehaviorNetListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.behavior"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBehavior([NotNull] BehaviorNetParser.BehaviorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.behavior"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBehavior([NotNull] BehaviorNetParser.BehaviorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElement([NotNull] BehaviorNetParser.ElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElement([NotNull] BehaviorNetParser.ElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.place"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlace([NotNull] BehaviorNetParser.PlaceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.place"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlace([NotNull] BehaviorNetParser.PlaceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.transition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTransition([NotNull] BehaviorNetParser.TransitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.transition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTransition([NotNull] BehaviorNetParser.TransitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] BehaviorNetParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] BehaviorNetParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idArgument</c>
	/// labeled alternative in <see cref="BehaviorNetParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdArgument([NotNull] BehaviorNetParser.IdArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idArgument</c>
	/// labeled alternative in <see cref="BehaviorNetParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdArgument([NotNull] BehaviorNetParser.IdArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>discardArgument</c>
	/// labeled alternative in <see cref="BehaviorNetParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDiscardArgument([NotNull] BehaviorNetParser.DiscardArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>discardArgument</c>
	/// labeled alternative in <see cref="BehaviorNetParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDiscardArgument([NotNull] BehaviorNetParser.DiscardArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.returnClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnClause([NotNull] BehaviorNetParser.ReturnClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.returnClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnClause([NotNull] BehaviorNetParser.ReturnClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.inClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInClause([NotNull] BehaviorNetParser.InClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.inClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInClause([NotNull] BehaviorNetParser.InClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.processClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcessClause([NotNull] BehaviorNetParser.ProcessClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.processClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcessClause([NotNull] BehaviorNetParser.ProcessClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.threadClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThreadClause([NotNull] BehaviorNetParser.ThreadClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.threadClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThreadClause([NotNull] BehaviorNetParser.ThreadClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.whereClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhereClause([NotNull] BehaviorNetParser.WhereClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.whereClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhereClause([NotNull] BehaviorNetParser.WhereClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExpression([NotNull] BehaviorNetParser.BoolExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExpression([NotNull] BehaviorNetParser.BoolExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] BehaviorNetParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] BehaviorNetParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberExpression([NotNull] BehaviorNetParser.NumberExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberExpression([NotNull] BehaviorNetParser.NumberExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpression([NotNull] BehaviorNetParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpression([NotNull] BehaviorNetParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] BehaviorNetParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] BehaviorNetParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parensExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParensExpression([NotNull] BehaviorNetParser.ParensExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parensExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParensExpression([NotNull] BehaviorNetParser.ParensExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] BehaviorNetParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] BehaviorNetParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] BehaviorNetParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] BehaviorNetParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpression([NotNull] BehaviorNetParser.OrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpression([NotNull] BehaviorNetParser.OrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>inExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInExpression([NotNull] BehaviorNetParser.InExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>inExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInExpression([NotNull] BehaviorNetParser.InExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpression([NotNull] BehaviorNetParser.AndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpression([NotNull] BehaviorNetParser.AndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringExpression([NotNull] BehaviorNetParser.StringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringExpression([NotNull] BehaviorNetParser.StringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>rangeExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRangeExpression([NotNull] BehaviorNetParser.RangeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>rangeExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRangeExpression([NotNull] BehaviorNetParser.RangeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bitwiseExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwiseExpression([NotNull] BehaviorNetParser.BitwiseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bitwiseExpression</c>
	/// labeled alternative in <see cref="BehaviorNetParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwiseExpression([NotNull] BehaviorNetParser.BitwiseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.edgeChain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEdgeChain([NotNull] BehaviorNetParser.EdgeChainContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.edgeChain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEdgeChain([NotNull] BehaviorNetParser.EdgeChainContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.idList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdList([NotNull] BehaviorNetParser.IdListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.idList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdList([NotNull] BehaviorNetParser.IdListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BehaviorNetParser.qualifiedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualifiedName([NotNull] BehaviorNetParser.QualifiedNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BehaviorNetParser.qualifiedName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualifiedName([NotNull] BehaviorNetParser.QualifiedNameContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Analyzer.ModelParser.Internal
