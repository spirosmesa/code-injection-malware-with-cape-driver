using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using Analyzer.Data;
using Analyzer.Model;
using Analyzer.Model.Evaluation;

namespace Analyzer
{
    /// <summary>
    /// Provides a mechanism for analysing event streams.
    /// </summary>
    public class ExecutionEventStreamAnalyzer
    {
        /// <summary>
        /// Gets a list of behavior nets to recognize.
        /// </summary>
        public IList<BehaviorGraph> Behaviors
        {
            get;
        } = new List<BehaviorGraph>();

        /// <summary>
        /// Analyzes the provided event stream for any of the fingerprinted behaviors.
        /// </summary>
        /// <param name="eventStream">The event stream to analyze.</param>
        /// <param name="cancellationToken">A token that can be used to cancel the process.</param>
        /// <returns>An analysis report.</returns>
        public AnalysisResult Analyze(ExecutionEventStream eventStream, CancellationToken cancellationToken)
        {
            var result = new AnalysisResult();
            
            var evaluators = new List<BehaviorGraphEvaluator>(Behaviors.Count);
            foreach (var net in Behaviors)
            {
                var evaluator = new BehaviorGraphEvaluator(net);
                evaluators.Add(evaluator);
                result.Markings.Add(evaluator.Marking);
            }

            /**
            each execution event in the event stream has a `Time` property indicating it's time.

            */

            using (StreamWriter writer = new StreamWriter("/home/sam/Desktop/finalResults.txt"))
            {
                foreach (var e in eventStream.Events)
                {
                    if (cancellationToken.IsCancellationRequested)
                        break;

                    for (int i = 0; i < evaluators.Count; i++)
                    {
                        var evaluator = evaluators[i];
                        evaluator.Step(e);
                        if (evaluator.IsAccepting)
                        {
                            writer.WriteLine("accepting: " + e.Time.ToString());
                            
                            result.DetectedBehaviors.Add(evaluator.Marking);
                            evaluators.RemoveAt(i);
                            i--;
                        }
                        else
                        {
                            writer.WriteLine("non-accepting: " + e.Time.ToString());
                        }
                    }
                }
            }

            return result;
        }
    }
}
