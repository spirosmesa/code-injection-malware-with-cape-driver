using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace NetworkTest
{
    internal static class Program
    {
        private static async Task Main(string[] args)
        {
            await TryDownloadExternalWebPage();

            if (args.Length != 0)
            {
                await TryDownloadWebPageFromHost(args[0]);
                await TryCommonTcpPorts(args[0]);
            }

            Console.ReadKey();
        }

        private static async Task TryDownloadExternalWebPage()
        {
            const string url = "https://google.com/";

            Console.WriteLine($"Attempting to fetch {url}");
            try
            {
                using var client = new WebClient();
                string result = await client.DownloadStringTaskAsync(url);
                if (result.Length > 500)
                    result = $"{result.Remove(500)}... (total length: {result.Length})";
                Console.WriteLine(result);
                WriteSuccess("Successfully received data.");
            }
            catch (Exception ex)
            {
                WriteError($"Failed to receive data.{ex.Message}");
            }
        }

        private static async Task TryDownloadWebPageFromHost(string host)
        {
            Console.WriteLine($"Attempting to fetch {host}");
            try
            {
                using var client = new WebClient();
                string result = await client.DownloadStringTaskAsync("http://" + host);
                if (result.Length > 500)
                    result = $"{result.Remove(500)}... (total length: {result.Length})";
                Console.WriteLine(result);
                WriteError("Successfully received data.");
            }
            catch (Exception ex)
            {
                WriteSuccess($"Failed to receive data.{ex.Message}");
            }
        }

        private static async Task TryCommonTcpPorts(string host)
        {
            int[] ports =
            {
                // SMTP
                25, 26, 465, 587, 2525,

                // POP3
                110, 995,

                // IMAP3
                143, 993,

                // Misc
                12345
            };

            byte[] message = Encoding.ASCII.GetBytes("Hello, world!\n");
            byte[] receiveBuffer = new byte[1024];

            foreach (int port in ports)
            {
                Console.WriteLine($"Attempting to connect to port {port}...");
                using var client = new TcpClient();

                try
                {

                    if (!client.ConnectAsync(host, port).Wait(10000))
                    {
                        WriteSuccess("Timed out!");
                        continue;
                    }

                    WriteError("Connected!");

                    var stream = client.GetStream();
                    stream.ReadTimeout = 10000;
                    stream.WriteTimeout = 10000;

                    Console.WriteLine("Sending data...");
                    await stream.WriteAsync(message, 0, message.Length);

                    Console.WriteLine("Receiving data...");
                    int count = await stream.ReadAsync(receiveBuffer, 0, receiveBuffer.Length);
                    if (count > 0)
                        WriteError($"Received {count} bytes! {BitConverter.ToString(receiveBuffer, 0, count)}");
                    else
                        WriteSuccess("Received 0 bytes!");

                }
                catch (Exception ex)
                {
                    WriteSuccess($"Failed to communicate to port {port}. {ex.Message}");
                }
            }
        }

        private static void WriteSuccess(string message)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(message);
            Console.ResetColor();
        }

        private static void WriteError(string message)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(message);
            Console.ResetColor();
        }
    }
}
